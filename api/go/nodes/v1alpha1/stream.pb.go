// Copyright 2025 Notedown Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: nodes/v1alpha1/stream.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*StreamRequest_Subscription
	Request       isStreamRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{0}
}

func (x *StreamRequest) GetRequest() isStreamRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *StreamRequest) GetSubscription() *Subscription {
	if x != nil {
		if x, ok := x.Request.(*StreamRequest_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

type isStreamRequest_Request interface {
	isStreamRequest_Request()
}

type StreamRequest_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3,oneof"`
}

func (*StreamRequest_Subscription) isStreamRequest_Request() {}

type Subscription struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Types that are valid to be assigned to Msg:
	//
	//	*Subscription_Unsubscribe
	//	*Subscription_DocumentSubscription
	Msg           isSubscription_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Subscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Subscription) GetMsg() isSubscription_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Subscription) GetUnsubscribe() *Unsubscribe {
	if x != nil {
		if x, ok := x.Msg.(*Subscription_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

func (x *Subscription) GetDocumentSubscription() *DocumentSubscription {
	if x != nil {
		if x, ok := x.Msg.(*Subscription_DocumentSubscription); ok {
			return x.DocumentSubscription
		}
	}
	return nil
}

type isSubscription_Msg interface {
	isSubscription_Msg()
}

type Subscription_Unsubscribe struct {
	Unsubscribe *Unsubscribe `protobuf:"bytes,10,opt,name=unsubscribe,proto3,oneof"`
}

type Subscription_DocumentSubscription struct {
	DocumentSubscription *DocumentSubscription `protobuf:"bytes,11,opt,name=document_subscription,json=documentSubscription,proto3,oneof"` // SectionSubscription section_subscription = 12;
}

func (*Subscription_Unsubscribe) isSubscription_Msg() {}

func (*Subscription_DocumentSubscription) isSubscription_Msg() {}

type Unsubscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Unsubscribe) Reset() {
	*x = Unsubscribe{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsubscribe) ProtoMessage() {}

func (x *Unsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsubscribe.ProtoReflect.Descriptor instead.
func (*Unsubscribe) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{2}
}

type DocumentSubscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkspaceName string                 `protobuf:"bytes,1,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentSubscription) Reset() {
	*x = DocumentSubscription{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSubscription) ProtoMessage() {}

func (x *DocumentSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSubscription.ProtoReflect.Descriptor instead.
func (*DocumentSubscription) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{3}
}

func (x *DocumentSubscription) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type SectionSubscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SectionSubscription) Reset() {
	*x = SectionSubscription{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SectionSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionSubscription) ProtoMessage() {}

func (x *SectionSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionSubscription.ProtoReflect.Descriptor instead.
func (*SectionSubscription) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{4}
}

type StreamEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*StreamEvent_InitializationComplete
	//	*StreamEvent_Load
	//	*StreamEvent_Change
	//	*StreamEvent_Delete
	Event         isStreamEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent.ProtoReflect.Descriptor instead.
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{5}
}

func (x *StreamEvent) GetEvent() isStreamEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *StreamEvent) GetInitializationComplete() *InitializationComplete {
	if x != nil {
		if x, ok := x.Event.(*StreamEvent_InitializationComplete); ok {
			return x.InitializationComplete
		}
	}
	return nil
}

func (x *StreamEvent) GetLoad() *Load {
	if x != nil {
		if x, ok := x.Event.(*StreamEvent_Load); ok {
			return x.Load
		}
	}
	return nil
}

func (x *StreamEvent) GetChange() *Change {
	if x != nil {
		if x, ok := x.Event.(*StreamEvent_Change); ok {
			return x.Change
		}
	}
	return nil
}

func (x *StreamEvent) GetDelete() *Delete {
	if x != nil {
		if x, ok := x.Event.(*StreamEvent_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

type isStreamEvent_Event interface {
	isStreamEvent_Event()
}

type StreamEvent_InitializationComplete struct {
	InitializationComplete *InitializationComplete `protobuf:"bytes,1,opt,name=initialization_complete,json=initializationComplete,proto3,oneof"`
}

type StreamEvent_Load struct {
	Load *Load `protobuf:"bytes,2,opt,name=load,proto3,oneof"`
}

type StreamEvent_Change struct {
	Change *Change `protobuf:"bytes,3,opt,name=change,proto3,oneof"`
}

type StreamEvent_Delete struct {
	Delete *Delete `protobuf:"bytes,4,opt,name=delete,proto3,oneof"`
}

func (*StreamEvent_InitializationComplete) isStreamEvent_Event() {}

func (*StreamEvent_Load) isStreamEvent_Event() {}

func (*StreamEvent_Change) isStreamEvent_Event() {}

func (*StreamEvent_Delete) isStreamEvent_Event() {}

// Indicates the completion of the initialization of a subscribe request
type InitializationComplete struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InitializationComplete) Reset() {
	*x = InitializationComplete{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializationComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializationComplete) ProtoMessage() {}

func (x *InitializationComplete) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializationComplete.ProtoReflect.Descriptor instead.
func (*InitializationComplete) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{6}
}

func (x *InitializationComplete) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Indicates that a node has been loaded as part of a subscribe request
type Load struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Node           *Node                  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Load) Reset() {
	*x = Load{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Load) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Load) ProtoMessage() {}

func (x *Load) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Load.ProtoReflect.Descriptor instead.
func (*Load) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{7}
}

func (x *Load) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Load) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

// Indicates that a node has been created or updated
type Change struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Node           *Node                  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Change) Reset() {
	*x = Change{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{8}
}

func (x *Change) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Change) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

// Indicates that a node has been deleted
type Delete struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Node           *Node                  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Delete) Reset() {
	*x = Delete{}
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_nodes_v1alpha1_stream_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_nodes_v1alpha1_stream_proto_rawDescGZIP(), []int{9}
}

func (x *Delete) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Delete) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

var File_nodes_v1alpha1_stream_proto protoreflect.FileDescriptor

var file_nodes_v1alpha1_stream_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6e,
	0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x1a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x64, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e,
	0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x0d, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22,
	0x3d, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x36, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64,
	0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x16, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x04,
	0x4c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a,
	0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0x61, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x32, 0x65, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0xca, 0x01, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x6f, 0x72, 0x67, 0x2f, 0x6e,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x4e, 0x58, 0xaa, 0x02, 0x14,
	0x4e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x4e, 0x64, 0x2e, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x14, 0x4e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x5c,
	0x4e, 0x64, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x20, 0x4e, 0x6f,
	0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x5c, 0x4e, 0x64, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x16, 0x4e, 0x6f, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x3a, 0x4e, 0x64, 0x3a, 0x3a, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_nodes_v1alpha1_stream_proto_rawDescOnce sync.Once
	file_nodes_v1alpha1_stream_proto_rawDescData []byte
)

func file_nodes_v1alpha1_stream_proto_rawDescGZIP() []byte {
	file_nodes_v1alpha1_stream_proto_rawDescOnce.Do(func() {
		file_nodes_v1alpha1_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nodes_v1alpha1_stream_proto_rawDesc), len(file_nodes_v1alpha1_stream_proto_rawDesc)))
	})
	return file_nodes_v1alpha1_stream_proto_rawDescData
}

var file_nodes_v1alpha1_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_nodes_v1alpha1_stream_proto_goTypes = []any{
	(*StreamRequest)(nil),          // 0: notedown.nd.v1alpha1.StreamRequest
	(*Subscription)(nil),           // 1: notedown.nd.v1alpha1.Subscription
	(*Unsubscribe)(nil),            // 2: notedown.nd.v1alpha1.Unsubscribe
	(*DocumentSubscription)(nil),   // 3: notedown.nd.v1alpha1.DocumentSubscription
	(*SectionSubscription)(nil),    // 4: notedown.nd.v1alpha1.SectionSubscription
	(*StreamEvent)(nil),            // 5: notedown.nd.v1alpha1.StreamEvent
	(*InitializationComplete)(nil), // 6: notedown.nd.v1alpha1.InitializationComplete
	(*Load)(nil),                   // 7: notedown.nd.v1alpha1.Load
	(*Change)(nil),                 // 8: notedown.nd.v1alpha1.Change
	(*Delete)(nil),                 // 9: notedown.nd.v1alpha1.Delete
	(*Node)(nil),                   // 10: notedown.nd.v1alpha1.Node
}
var file_nodes_v1alpha1_stream_proto_depIdxs = []int32{
	1,  // 0: notedown.nd.v1alpha1.StreamRequest.subscription:type_name -> notedown.nd.v1alpha1.Subscription
	2,  // 1: notedown.nd.v1alpha1.Subscription.unsubscribe:type_name -> notedown.nd.v1alpha1.Unsubscribe
	3,  // 2: notedown.nd.v1alpha1.Subscription.document_subscription:type_name -> notedown.nd.v1alpha1.DocumentSubscription
	6,  // 3: notedown.nd.v1alpha1.StreamEvent.initialization_complete:type_name -> notedown.nd.v1alpha1.InitializationComplete
	7,  // 4: notedown.nd.v1alpha1.StreamEvent.load:type_name -> notedown.nd.v1alpha1.Load
	8,  // 5: notedown.nd.v1alpha1.StreamEvent.change:type_name -> notedown.nd.v1alpha1.Change
	9,  // 6: notedown.nd.v1alpha1.StreamEvent.delete:type_name -> notedown.nd.v1alpha1.Delete
	10, // 7: notedown.nd.v1alpha1.Load.node:type_name -> notedown.nd.v1alpha1.Node
	10, // 8: notedown.nd.v1alpha1.Change.node:type_name -> notedown.nd.v1alpha1.Node
	10, // 9: notedown.nd.v1alpha1.Delete.node:type_name -> notedown.nd.v1alpha1.Node
	0,  // 10: notedown.nd.v1alpha1.NodeService.Stream:input_type -> notedown.nd.v1alpha1.StreamRequest
	5,  // 11: notedown.nd.v1alpha1.NodeService.Stream:output_type -> notedown.nd.v1alpha1.StreamEvent
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_nodes_v1alpha1_stream_proto_init() }
func file_nodes_v1alpha1_stream_proto_init() {
	if File_nodes_v1alpha1_stream_proto != nil {
		return
	}
	file_nodes_v1alpha1_types_proto_init()
	file_nodes_v1alpha1_stream_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamRequest_Subscription)(nil),
	}
	file_nodes_v1alpha1_stream_proto_msgTypes[1].OneofWrappers = []any{
		(*Subscription_Unsubscribe)(nil),
		(*Subscription_DocumentSubscription)(nil),
	}
	file_nodes_v1alpha1_stream_proto_msgTypes[5].OneofWrappers = []any{
		(*StreamEvent_InitializationComplete)(nil),
		(*StreamEvent_Load)(nil),
		(*StreamEvent_Change)(nil),
		(*StreamEvent_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nodes_v1alpha1_stream_proto_rawDesc), len(file_nodes_v1alpha1_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nodes_v1alpha1_stream_proto_goTypes,
		DependencyIndexes: file_nodes_v1alpha1_stream_proto_depIdxs,
		MessageInfos:      file_nodes_v1alpha1_stream_proto_msgTypes,
	}.Build()
	File_nodes_v1alpha1_stream_proto = out.File
	file_nodes_v1alpha1_stream_proto_goTypes = nil
	file_nodes_v1alpha1_stream_proto_depIdxs = nil
}
