// Copyright 2025 Notedown Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package notedown.nd.v1alpha1;

option go_package = "github.com/notedownorg/nd/api/v1alpha1;v1alpha1";

import "nodes/v1alpha1/types.proto";

service NodeService {
    rpc Stream(stream StreamRequest) returns (stream StreamEvent) {}
}

message StreamRequest {
    oneof request {
        SubscriptionRequest subscription = 1;
    }
}

message SubscriptionRequest {
    string subscription_id = 1;
    oneof msg {
        Unsubscribe unsubscribe = 10; 
        DocumentSubscription document_subscription = 11;
    }
}

message Unsubscribe {}

message DocumentSubscription {
    string workspace_name = 1;
}

message StreamEvent {
    oneof event {
        SubscriptionConfirmation subscription_confirmation = 1;
        InitializationComplete initialization_complete = 2;
        Load load = 3;
        Change change = 4;
        Delete delete = 5;
        Error error = 6;
    }
}

message SubscriptionConfirmation {
    string subscription_id = 1;
}

// Indicates the completion of the initialization of a subscribe request
message InitializationComplete {
    string subscription_id = 1;
}

// Indicates that a node has been loaded as part of a subscribe request
message Load {
    string subscription_id = 1;
    Node node = 2;
}

// Indicates that a node has been created or updated
message Change {
    string subscription_id = 1;
    Node node = 2;
}

// Indicates that a node has been deleted
message Delete {
    string subscription_id = 1;
    Node node = 2;
}

// Error types for streaming operations
enum ErrorCode {
    UNKNOWN_ERROR = 0;
    SUBSCRIPTION_ID_CONFLICT = 1;
    WORKSPACE_NOT_FOUND = 2;
    INVALID_REQUEST = 3;
    INTERNAL_ERROR = 4;
}

// Indicates an error with a request
message Error {
    string request_id = 1;  // Links to subscription_id or other request ID
    ErrorCode error_code = 2;
    string error_message = 3;
}

